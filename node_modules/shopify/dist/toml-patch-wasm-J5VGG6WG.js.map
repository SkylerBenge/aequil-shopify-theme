{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@shopify+toml-patch@0.3.0/node_modules/@shopify/toml-patch/toml_patch.js", "../../app/src/cli/services/app/toml-patch-wasm.ts"],
  "sourcesContent": ["\nlet imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextEncoder, TextDecoder } = require(`util`);\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_0.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n/**\n * Parses a TOML string using `toml_edit` and returns the serialized result.\n * Useful for validating and potentially normalizing TOML content.\n * Returns an error if the TOML content cannot be parsed.\n * @param {string} tomlContent\n * @returns {string}\n */\nmodule.exports.echoToml = function(tomlContent) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const ptr0 = passStringToWasm0(tomlContent, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.echoToml(ptr0, len0);\n        var ptr2 = ret[0];\n        var len2 = ret[1];\n        if (ret[3]) {\n            ptr2 = 0; len2 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n * Updates TOML content with the provided key-value pairs\n *\n * # Arguments\n * * `toml_content` - A string containing valid TOML\n * * `patches` - An array of patches to apply; each patch is a tuple of a path and a value/values\n *\n * An undefined value in a patch will remove the key from the TOML document.\n *\n * # Returns\n * * `Ok(String)` - The updated TOML content as a string\n * * `Err(String)` - An error message if the operation fails\n * @param {string} tomlContent\n * @param {[string[], number | string | boolean | undefined | (number | string | boolean)[]][]} patches\n * @returns {string}\n */\nmodule.exports.updateTomlValues = function(tomlContent, patches) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const ptr0 = passStringToWasm0(tomlContent, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.updateTomlValues(ptr0, len0, patches);\n        var ptr2 = ret[0];\n        var len2 = ret[1];\n        if (ret[3]) {\n            ptr2 = 0; len2 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\nmodule.exports.__wbg_from_2a5d3e218e67aa85 = function(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nmodule.exports.__wbg_get_b9b93047fe3cf45b = function(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nmodule.exports.__wbg_length_e2d2a49132c1b256 = function(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nmodule.exports.__wbindgen_boolean_get = function(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nmodule.exports.__wbindgen_init_externref_table = function() {\n    const table = wasm.__wbindgen_export_0;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nmodule.exports.__wbindgen_is_array = function(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nmodule.exports.__wbindgen_number_get = function(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nmodule.exports.__wbindgen_string_get = function(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nconst path = require('path').join(__dirname, 'toml_patch_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\nwasm.__wbindgen_start();\n\n", "import * as tomlPatch from '@shopify/toml-patch'\n\ntype TomlSingleValue = string | number | boolean\n\ntype TomlPatchValue = TomlSingleValue | TomlSingleValue[] | undefined\n\n/**\n * Update the TOML content using the WASM module\n * @param tomlContent - The TOML content to update\n * @param patches - An array of tuples, each containing a dotted path and a value\n * @returns The updated TOML content\n */\nexport async function updateTomlValues(tomlContent: string, patches: [string[], TomlPatchValue][]): Promise<string> {\n  return tomlPatch.updateTomlValues(tomlContent, patches)\n}\n"],
  "mappings": "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",
  "names": ["ptr", "updateTomlValues"]
}
